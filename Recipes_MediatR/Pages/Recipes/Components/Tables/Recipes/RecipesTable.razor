@using Recipes_MediatR.Components.Recipes.Tables.Ingredients;
@using static Recipes_MediatR.Components.Recipes.Tables.Recipes.RecipesTableHandler;
@inject IMediator MediatR;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;

<MudTable Loading="@_loading" Items="@Recipes" Bordered="true" Striped="true" Filter="new Func<RecipesTableViewModel,bool>(FilterFunc1)" 
        @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">My Recipes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" 
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col style="width:5%;"/>
        <col style="width:5%;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Title</MudTd>
        <MudTd DataLabel="Created By">@context.Createby</MudTd>
        <MudTd DataLabel="Created Date">@context.Createddate</MudTd>
        <MudTd DataLabel="View">
            <MudButton OnClick="@(()=> ViewRecipe(context.Id))" Variant="Variant.Filled" Color="Color.Primary">View</MudButton>
        </MudTd>
        <MudTd DataLabel="Edit">
            <MudButton OnClick="@(()=> EditRecipe(context.Id))" Variant="Variant.Filled" Color="Color.Secondary">Edit</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString1 = "";
    private RecipesTableViewModel selectedItem1 = null;
    private IEnumerable<RecipesTableViewModel> Recipes = new List<RecipesTableViewModel>();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Recipes = await MediatR.Send(new GetRecipes(pageSize: 10));
        _loading = false;
    }

    private bool FilterFunc1(RecipesTableViewModel recipe) => FilterFunc(recipe, searchString1);

    private bool FilterFunc(RecipesTableViewModel recipe, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (!string.IsNullOrEmpty(recipe.Title) && recipe.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(recipe.Createby) && recipe.Createby.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Createddate.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ViewRecipe(int id)
    {
        var recipe = Recipes.FirstOrDefault(x => x.Id == id);
        NavigationManager.NavigateTo("/viewrecipe/" + id);
    }

    private void EditRecipe(int id)
    {
        var recipe = Recipes.FirstOrDefault(x => x.Id == id);
        NavigationManager.NavigateTo("/editrecipe/" + id);
    }
}