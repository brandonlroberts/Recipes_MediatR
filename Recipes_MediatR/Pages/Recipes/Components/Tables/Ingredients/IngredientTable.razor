@using static Recipes_MediatR.Components.Recipes.Tables.Recipes.IngredientTableHandler;
@inject IMediator MediatR;

<MudTable Items="@Ingredients" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Measurement</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Measurements">@context.Measurements</MudTd>
    </RowTemplate>
</MudTable>

<MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch>
@code {
    private bool _loading = true;
    private IEnumerable<IngredientViewModel> Ingredients = new List<IngredientViewModel>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Ingredients = await MediatR.Send(new GetIngredients(pageSize: 10));
        _loading = false;
    }
}


@*@using static Recipes_MediatR.Components.Recipes.Tables.Recipes.IngredientTableHandler;
@inject IMediator MediatR;
@inject ISnackbar Snackbar

<MudTable Items="@Recipes" Dense="true" Hover="true" CanCancelEdit="true" Filter="new Func<RecipesTableViewModel,bool>(FilterFunc)"
@bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End"
          EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recipes</MudText>
        <MudSpacer />
        <MudTextField
            @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:33%;" />
        <col style="width:33%;" />
        <col style="width:33%;" />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RecipesTableViewModel, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RecipesTableViewModel, object>(x=>x.Createddate)">Created Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RecipesTableViewModel, object>(x=>x.Createby)">Created By</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Created Date">@context.Createddate</MudTd>
        <MudTd DataLabel="Created By">@context.Createby</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Title">
            <MudTextField @bind-Value="@context.Title" Required />
        </MudTd>
        <MudTd DataLabel="Temperature C">
            <MudDatePicker @bind-Date="@context.Createddate" DateFormat="dd.MM.yyyy" Required />
        </MudTd>
        <MudTd DataLabel="Create By">
            <MudTextField @bind-Value="@context.Createby" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
    </EditButtonContent>
</MudTable>

@code {
    private List<string> editEvents = new();
    private string searchString = "";
    private RecipesTableViewModel? selectedItem1;
    private RecipesTableViewModel? recipeBeforeEdit;
    private HashSet<RecipesTableViewModel> selectedItems1 = new HashSet<RecipesTableViewModel>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<RecipesTableViewModel> Recipes = new List<RecipesTableViewModel>();

    protected override async Task OnInitializedAsync()
    {
        Recipes = await MediatR.Send(new GetRecipes(pageSize: 10));
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object recipe)
    {
        recipeBeforeEdit = new()
            {
                Title = ((RecipesTableViewModel)recipe).Title,
                Createddate = ((RecipesTableViewModel)recipe).Createddate,
                Createby = ((RecipesTableViewModel)recipe).Createby
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Recipe {((RecipesTableViewModel)recipe).Title}");
    }

    private void ItemHasBeenCommitted(object recipe)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Recipe {((RecipesTableViewModel)recipe).Title} committed");
    }

    private void ResetItemToOriginalValues(object recipe)
    {
        ((RecipesTableViewModel)recipe).Title = recipeBeforeEdit?.Title;
        ((RecipesTableViewModel)recipe).Createddate = recipeBeforeEdit!.Createddate;
        ((RecipesTableViewModel)recipe).Createby = recipeBeforeEdit.Createby;
        AddEditionEvent($"RowEditCancel event: Editing of Recipe {((RecipesTableViewModel)recipe).Title} canceled");
    }

    private bool FilterFunc(RecipesTableViewModel recipe)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (!string.IsNullOrEmpty(recipe.Title) && recipe.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (recipe.Createddate != null && recipe.Createddate.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(recipe.Createby) && recipe.Createby.Contains(searchString))
            return true;
        return false;
    }
}*@